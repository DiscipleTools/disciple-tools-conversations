{"version":3,"file":"dt-list.js","sources":["../../../src/components/layout/dt-list/dt-list.js"],"sourcesContent":["import { html, css } from 'lit';\nimport { msg, str } from '@lit/localize';\nimport { map } from 'lit/directives/map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport DtBase from '../../dt-base.js';\nimport ApiService from '../../../services/apiService.js';\nimport '../../icons/dt-star.js';\n\nexport class DtList extends DtBase {\n  static get styles() {\n    return css`\n      :host {\n        --number-of-columns: 7;\n        font-family: var(--dt-list-font-family, var(--font-family));\n        font-size: var(--dt-list-font-size, 15px);\n        font-weight: var(--dt-list-font-weight, 300);\n        line-height: var(--dt-list-line-height, 1.5);\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .section {\n        container-type: inline-size;\n        background-color: var(--dt-list-background-color, #fefefe);\n        border: 1px solid var(--dt-list-border-color, #f1f1f1);\n        border-radius: var(--dt-list-border-radius, 10px);\n        box-shadow: var(--dt-list-box-shadow, 0 2px 4px rgb(0 0 0 / 25%));\n        padding: var(--dt-list-section-padding, 1rem);\n      }\n\n      .header {\n        display: flex;\n        justify-content: flex-start;\n        align-items: baseline;\n        gap: var(--dt-list-header-gap, 1.5em);\n        flex-wrap: wrap;\n      }\n\n      .section-header {\n        color: var(--dt-list-header-color, var(--primary-color));\n        font-size: 1.5rem;\n        display: inline-block;\n        text-transform: capitalize;\n      }\n\n      .toggleButton {\n        color: var(--dt-list-header-color, var(--primary-color));\n        font-size: 1rem;\n        background: transparent;\n        border: var(--dt-list-toggleButton, 0.1em solid rgb(0 0 0 / 0.2));\n        border-radius: 0.25em;\n        padding: 0.25em 0.5em;\n        cursor: pointer;\n      }\n\n      .toggleButton svg {\n        height: 0.9rem;\n        transform: translateY(-2px);\n        vertical-align: bottom;\n        width: 1rem;\n        fill: var(--dt-list-header-color, var(--primary-color));\n        stroke: var(--dt-list-header-color, var(--primary-color));\n      }\n\n      .list_action_section {\n        background-color: var(\n          --dt-list-action-section-background-color,\n          #ecf5fc\n        );\n        border-radius: var(--dt-list-border-radius, 10px);\n        margin: var(--dt-list-action-section-margin, 30px 0);\n        padding: var(--dt-list-action-section-padding, 20px);\n      }\n      .list_action_section_header {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n      }\n      .close-button {\n        outline: none;\n        font-size: 2.5em;\n        line-height: 1;\n        color: var(--dt-list-action-close-button, var(--inactive-color));\n        background: transparent;\n        border: none;\n        cursor: pointer;\n      }\n      .fieldsList {\n        list-style-type: none;\n        column-count: 1;\n      }\n\n      .list-field-picker-item {\n        list-style-type: none;\n      }\n\n      .list-field-picker-item input {\n        margin: 1rem;\n      }\n\n      .list-field-picker-item .dt-icon {\n        height: var(--dt-list-field-picker-icon-size, 1rem);\n        width: var(--dt-list-field-picker-icon-size, 1rem);\n      }\n\n      table {\n        display: grid;\n        border: 1px solid var(--dt-list-border-color, #f1f1f1);\n        border-top: 0;\n        border-collapse: collapse;\n        min-width: 100%;\n        grid-template-columns: minmax(32px, 0.1fr) minmax(32px, 0.1fr) minmax(\n            50px,\n            0.8fr\n          );\n      }\n\n      table td:last-child {\n        border-bottom: 1px solid var(--dt-list-border-color, #f1f1f1);\n        padding-bottom: 2rem;\n      }\n\n      thead,\n      tbody,\n      tr {\n        display: contents;\n      }\n\n      tr {\n        cursor: pointer;\n      }\n\n      tr:nth-child(2n + 1) {\n        background: #f1f1f1;\n      }\n\n      tr:hover {\n        background-color: var(--dt-list-hover-background-color, #ecf5fc);\n      }\n\n      tr a {\n        color: var(--dt-list-link-color, var(--primary-color));\n      }\n\n      th {\n        display: none;\n      }\n\n      .column-name {\n        pointer-events: none;\n      }\n      #sort-arrows {\n        grid-template-columns: 4fr 1fr;\n        display: flex;\n        flex-direction: column;\n        height: 1.5em;\n        justify-content: space-evenly;\n      }\n      th.all span.sort-arrow-up {\n        border-color: transparent transparent\n          var(--dt-list-sort-arrow-color, #808080) transparent;\n        border-style: solid;\n        border-width: 0 0.5em 0.5em 0.5em;\n      }\n\n      th.all span.sort-arrow-down {\n        content: '';\n        border-color: var(--dt-list-sort-arrow-color, #808080) transparent\n          transparent;\n        border-style: solid;\n        border-width: 0.5em 0.5em 0;\n      }\n\n      th.all span.sort-arrow-up.sortedBy {\n        border-color: transparent transparent\n          var(--dt-list-sort-arrow-color-highlight, #999999) transparent;\n      }\n\n      th.all span.sort-arrow-down.sortedBy {\n        border-color: var(--dt-list-sort-arrow-color-highlight, #999999)\n          transparent transparent;\n      }\n\n      td {\n        border: 0;\n        grid-column: 1 / span 3;\n        padding-inline-start: 1em;\n      }\n\n      td::before {\n        content: attr(title) ': ';\n        padding-inline-end: 1em;\n      }\n\n      td.no-title {\n        grid-column: auto;\n      }\n\n      td.line-count {\n        padding-block-start: 0.8em;\n        padding-inline-start: 1em;\n      }\n\n      td.bulk_edit_checkbox {\n        grid-column: 1 / auto;\n      }\n\n      td.no-title::before {\n        content: '';\n        padding-inline-end: 0.25em;\n      }\n\n      th.bulk_edit_checkbox,\n      td.bulk_edit_checkbox {\n        grid-column: none;\n      }\n\n      .bulk_edit_checkbox input {\n        display: none;\n      }\n\n      .bulk_editing th.bulk_edit_checkbox,\n      .bulk_editing td.bulk_edit_checkbox {\n        grid-column: 1 / auto;\n      }\n\n      .bulk_editing .bulk_edit_checkbox input {\n        display: initial;\n      }\n\n      ul {\n        margin: 0;\n        padding: 0;\n      }\n\n      ul li {\n        list-style-type: none;\n      }\n\n      input[type='checkbox'] {\n        margin: 1rem;\n      }\n      @container (min-width: 650px) {\n        .fieldsList {\n          column-count: 2;\n        }\n        table {\n          grid-template-columns:\n            minmax(32px, 0.5fr)\n            minmax(32px, 0.5fr)\n            minmax(32px, 0.5fr)\n            repeat(var(--number-of-columns, 7), minmax(50px, 1fr));\n        }\n\n        th {\n          position: sticky;\n          top: 0;\n          background: var(\n            --dt-list-header-background-color,\n            var(--dt-tile-background-color, #fefefe)\n          );\n          text-align: start;\n          justify-self: start;\n          font-weight: normal;\n          font-size: 1.1rem;\n          color: var(--dt-list-header-color, #0a0a0a);\n          white-space: pre-wrap;\n          display: grid;\n          place-items: center;\n          grid-template-columns: 2fr 1fr;\n        }\n\n        th:last-child {\n          border: 0;\n        }\n        td {\n          display: flex;\n          align-items: center;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          padding-top: 0.5rem;\n          padding-bottom: 0.5rem;\n          padding-inline-start: 0;\n          color: var(--text-color-mid);\n          border-bottom: 1px solid var(--dt-list-border-color, #f1f1f1);\n          grid-column: auto;\n        }\n        td::before {\n          content: '';\n          display: none;\n        }\n      }\n      @container (min-width: 950px) {\n        .fieldsList {\n          column-count: 3;\n        }\n      }\n      @container (min-width: 1500px) {\n        .fieldsList {\n          column-count: 4;\n        }\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      postType: { type: String },\n      postTypeLabel: { type: String },\n      postTypeSettings: { type: Object, attribute: true },\n      posts: { type: Array },\n      total: { type: Number },\n      columns: { type: Array },\n      sortedBy: { type: String },\n      loading: { type: Boolean, default: true },\n      offset: { type: Number },\n      showArchived: { type: Boolean, default: false },\n      showFieldsSelector: { type: Boolean, default: false },\n      showBulkEditSelector: { type: Boolean, default: false },\n      nonce: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.sortedBy = 'name';\n  }\n\n  firstUpdated() {\n    if (this.nonce && !this.api) {\n      this.api = new ApiService(this.nonce);\n    }\n  }\n\n  async _getPosts(offset = 0, sortBy = 'name', sortOrder = 'desc') {\n    this.loading = true;\n    this.filteredOptions = [];\n    const sort = `${sortOrder === 'desc' ? '-' : ''}${sortBy}`;\n    const URLParams = encodeURI(\n      `?offset=${offset}&sortBy=${sort}&offset=${offset}${this.columns\n        .map(column => `&fields_to_return=${column}`)\n        .join('')}`\n    );\n    const response = await this.api.makeRequestOnPosts(\n      'GET',\n      `${this.postType}${URLParams}`\n    );\n\n    return response;\n  }\n\n  _headerClick(e) {\n    const column = e.target.dataset.id;\n    this._getPosts(this.offset ? this.offset : 0, column).then(response => {\n      this.posts = response;\n      this.sortedBy = column;\n    });\n  }\n\n  _bulkEdit() {\n    this.showBulkEditSelector = !this.showBulkEditSelector;\n  }\n\n  _fieldsEdit() {\n    this.showFieldsSelector = !this.showFieldsSelector;\n  }\n\n  _toggleShowArchived() {\n    this.showArchived = !this.showArchived;\n  }\n\n  _sortArrowsClass(column) {\n    return this.sortedBy === column ? 'sortedBy' : '';\n  }\n\n  _sortArrowsToggle(column) {\n    if (this.sortedBy !== `-${column}`) {\n      return `-${column}`;\n    }\n    return column;\n  }\n\n  _headerTemplate() {\n    // const classes = {\n    //   sortedBy: this.sortedBy,\n    // };\n    return html`\n      <thead>\n        <tr>\n          <th id=\"bulk_edit_master\" class=\"bulk_edit_checkbox\">\n            <input\n              type=\"checkbox\"\n              name=\"bulk_send_app_id\"\n              value=\"\"\n              id=\"bulk_edit_master_checkbox\"\n            />\n          </th>\n\n          <th></th>\n\n          ${map(\n            this.columns,\n            column =>\n              html`<th\n                class=\"all\"\n                data-id=\"${this._sortArrowsToggle(column)}\"\n                @click=${this._headerClick}\n              >\n                <span class=\"column-name\"\n                  >${this.postTypeSettings[column].name}</span\n                >\n                <span id=\"sort-arrows\">\n                  <span\n                    class=\"sort-arrow-up ${this._sortArrowsClass(`-${column}`)}\"\n                    data-id=\"-${column}\"\n                  ></span>\n                  <span\n                    class=\"sort-arrow-down ${this._sortArrowsClass(column)}\"\n                    data-id=\"${column}\"\n                  ></span>\n                </span>\n              </th>`\n          )}\n        </tr>\n      </thead>\n    `;\n  }\n\n  _rowTemplate() {\n    return map(this.posts, (post, i) => {\n      if (\n        this.showArchived ||\n        (!this.showArchived && post.overall_status.key !== 'closed')\n      ) {\n        return html`\n          <tr class=\"dnd-moved\" data-link=\"${this.posts.permalink}\">\n            <td class=\"bulk_edit_checkbox no-title\">\n              <input type=\"checkbox\" name=\"bulk_edit_id\" .value=\"${post.ID}\" />\n            </td>\n            <td class=\"no-title line-count\">${i + 1}.</td>\n\n            ${this._cellTemplate(post)}\n          </tr>\n        `;\n      }\n      return null;\n    });\n  }\n\n  _cellTemplate(post) {\n    return map(this.columns, column => {\n      if (\n        ['text', 'textarea', 'number'].includes(\n          this.postTypeSettings[column].type\n        )\n      ) {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          <a href=\"${post[column]}\" title=\"test\">${post[column]}</a>\n        </td>`;\n      }\n      if (this.postTypeSettings[column].type === 'date') {\n        // TODO: format date\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          ${post[column].formatted}\n        </td>`;\n      }\n      if (\n        this.postTypeSettings[column].type === 'user_select' &&\n        post[column] &&\n        post[column].display\n      ) {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          ${ifDefined(post[column].display)}\n        </td>`;\n      }\n      if (\n        this.postTypeSettings[column].type === 'key_select' &&\n        post[column] &&\n        (post[column].label || post[column].name)\n      ) {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          ${post[column].label || post[column].name}\n        </td>`;\n      }\n      if (\n        this.postTypeSettings[column].type === 'multi_select' ||\n        (this.postTypeSettings[column].type === 'tags' &&\n          post[column] &&\n          post[column].length > 0)\n      ) {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          <ul>\n            ${map(\n              post[column],\n              value =>\n                html`<li>\n                  ${this.postTypeSettings[column].default[value].label}\n                </li>`\n            )}\n          </ul>\n        </td>`;\n      }\n      if (\n        this.postTypeSettings[column].type === 'location' ||\n        this.postTypeSettings[column].type === 'location_meta'\n      ) {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          ${ifDefined(post[column].label)}\n        </td>`;\n      }\n      if (this.postTypeSettings[column].type === 'communication_channel') {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          ${ifDefined(post[column].value)}\n        </td>`;\n      }\n      if (this.postTypeSettings[column].type === 'connection') {\n        return html` <td\n          dir=\"auto\"\n          title=\"${this.postTypeSettings[column].name}\"\n        >\n          <!-- TODO: look at this, it doesn't match the current theme. -->\n          ${ifDefined(post[column].value)}\n        </td>`;\n      }\n      if (this.postTypeSettings[column].type === 'boolean') {\n        if (column === 'favorite') {\n          return html`<td\n            dir=\"auto\"\n            title=\"${this.postTypeSettings[column].name}\"\n            class=\"\"\n          >\n            <dt-star postID=${post.ID} ?selected=${post.favorite}></dt-star>\n          </td>`;\n        }\n        if (this.postTypeSettings[column] === true) {\n          return html`<td\n            dir=\"auto\"\n            title=\"${this.postTypeSettings[column].name}\"\n          >\n            ['&check;']\n          </td>`;\n        }\n      }\n      return html`<td\n        dir=\"auto\"\n        title=\"${this.postTypeSettings[column].name}\"\n      ></td>`;\n    });\n  }\n\n  _fieldListIconTemplate(field) {\n    if (this.postTypeSettings[field].icon) {\n      return html`<img\n        class=\"dt-icon\"\n        src=\"${this.postTypeSettings[field].icon}\"\n        alt=\"${this.postTypeSettings[field].name}\"\n      />`;\n    }\n    return null;\n  }\n\n  _fieldsListTemplate() {\n    return repeat(\n      Object.keys(this.postTypeSettings).sort((a, b) => {\n        const nameA = this.postTypeSettings[a].name.toUpperCase(); // ignore upper and lowercase\n        const nameB = this.postTypeSettings[b].name.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        // names must be equal\n        return 0;\n      }),\n      field => field,\n      field => {\n        if (!this.postTypeSettings[field].hidden) {\n          return html`<li class=\"list-field-picker-item\">\n            <label>\n              <input\n                type=\"checkbox\"\n                id=\"${field}\"\n                name=\"${field}\"\n                .value=\"${field}\"\n                @change=${this._updateFields}\n                ?checked=${this.columns.includes(field)}\n              />\n              ${this._fieldListIconTemplate(field)}\n              ${this.postTypeSettings[field].name}</label\n            >\n          </li> `;\n        }\n        return null;\n      }\n    );\n  }\n\n  _fieldsSelectorTemplate() {\n    if (this.showFieldsSelector) {\n      return html`<div\n        id=\"list_column_picker\"\n        class=\"list_field_picker list_action_section\"\n      >\n        <div class=\"list_action_section_header\">\n          <p style=\"font-weight:bold\">\n            ${msg('Choose which fields to display as columns in the list')}\n          </p>\n          <button\n            class=\"close-button list-action-close-button\"\n            data-close=\"list_column_picker\"\n            aria-label=\"Close modal\"\n            type=\"button\"\n            @click=${this._fieldsEdit}\n          >\n            <span aria-hidden=\"true\">×</span>\n          </button>\n        </div>\n        <ul class=\"fieldsList\">\n          ${this._fieldsListTemplate()}\n        </ul>\n      </div>`;\n    }\n    return null;\n  }\n\n  _updateFields(e) {\n    const field = e.target.value;\n    const viewableColumns = this.columns;\n\n    if (!viewableColumns.includes(field)) {\n      viewableColumns.push(field);\n    } else {\n      viewableColumns.filter(column => column !== field);\n      viewableColumns.splice(viewableColumns.indexOf(field), 1);\n    }\n\n    this.columns = viewableColumns;\n    this.style.setProperty('--number-of-columns', this.columns.length - 1);\n\n    this.requestUpdate();\n  }\n\n  _bulkSelectorTemplate() {\n    if (this.showBulkEditSelector) {\n      return html`<div id=\"bulk_edit_picker\" class=\"list_action_section\">\n        <div class=\"list_action_section_header\">\n          <p style=\"font-weight:bold\">\n            ${msg(\n              str`Select all the ${this.postType} you want to update from the list, and update them below`\n            )}\n          </p>\n          <button\n            class=\"close-button list-action-close-button\"\n            aria-label=\"Close modal\"\n            type=\"button\"\n            @click=${this._bulkEdit}\n          >\n            <span aria-hidden=\"true\">×</span>\n          </button>\n        </div>\n        <ul class=\"fieldsList\">\n          This is where the bulk edit form will go.\n        </ul>\n      </div>`;\n    }\n    return null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (!this.posts) {\n      this._getPosts().then(posts => {\n        this.posts = posts;\n      });\n    }\n  }\n\n  render() {\n    const bulkEditClass = {\n      bulk_editing: this.showBulkEditSelector,\n      hidden: false,\n    };\n\n    // prettier-ignore\n    const bulkEditSvg = html`\n      <svg viewBox=\"0 0 100 100\" fill=\"#000000\" style=\"enable-background:new 0 0 100 100;\" xmlns=\"http://www.w3.org/2000/svg\">\n        <line style=\"stroke-linecap: round; paint-order: fill; fill: none; stroke-width: 15px;\" x1=\"7.97\" y1=\"50.199\" x2=\"76.069\" y2=\"50.128\" transform=\"matrix(0.999999, 0.001017, -0.001017, 0.999999, 0.051038, -0.042708)\"/>\n        <line style=\"stroke-linecap: round; stroke-width: 15px;\" x1=\"7.97\" y1=\"17.751\" x2=\"92.058\" y2=\"17.751\"/>\n        <line style=\"stroke-linecap: round; stroke-width: 15px;\" x1=\"7.97\" y1=\"82.853\" x2=\"42.343\" y2=\"82.853\"/>\n        <polygon style=\"stroke-linecap: round; stroke-miterlimit: 1; stroke-linejoin: round; fill: rgb(255, 255, 255); paint-order: stroke; stroke-width: 9px;\" points=\"22.982 64.982 33.592 53.186 50.916 70.608 82.902 21.308 95 30.85 52.256 95\"/>\n      </svg>\n    `;\n    // prettier-ignore\n    const fieldsSvg = html`<svg height='100px' width='100px'  fill=\"#000000\" xmlns:x=\"http://ns.adobe.com/Extensibility/1.0/\" xmlns:i=\"http://ns.adobe.com/AdobeIllustrator/10.0/\" xmlns:graph=\"http://ns.adobe.com/Graphs/1.0/\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><g><g i:extraneous=\"self\"><g><path d=\"M94.4,63c0-5.7-3.6-10.5-8.6-12.5V7.3c0-2.7-2.2-4.8-4.8-4.8c-2.7,0-4.8,2.2-4.8,4.8v43.2c-5,1.9-8.6,6.8-8.6,12.5     s3.6,10.5,8.6,12.5v17.2c0,2.7,2.2,4.8,4.8,4.8c2.7,0,4.8-2.2,4.8-4.8V75.5C90.9,73.6,94.4,68.7,94.4,63z M81,66.7     c-2,0-3.7-1.7-3.7-3.7c0-2,1.7-3.7,3.7-3.7s3.7,1.7,3.7,3.7C84.7,65.1,83.1,66.7,81,66.7z\"></path><path d=\"M54.8,24.5V7.3c0-2.7-2.2-4.8-4.8-4.8c-2.7,0-4.8,2.2-4.8,4.8v17.2c-5,1.9-8.6,6.8-8.6,12.5s3.6,10.5,8.6,12.5v43.2     c0,2.7,2.2,4.8,4.8,4.8c2.7,0,4.8-2.2,4.8-4.8V49.5c5-1.9,8.6-6.8,8.6-12.5S59.8,26.5,54.8,24.5z M50,40.7c-2,0-3.7-1.7-3.7-3.7     c0-2,1.7-3.7,3.7-3.7c2,0,3.7,1.7,3.7,3.7C53.7,39.1,52,40.7,50,40.7z\"></path><path d=\"M23.8,50.5V7.3c0-2.7-2.2-4.8-4.8-4.8c-2.7,0-4.8,2.2-4.8,4.8v43.2c-5,1.9-8.6,6.8-8.6,12.5s3.6,10.5,8.6,12.5v17.2     c0,2.7,2.2,4.8,4.8,4.8c2.7,0,4.8-2.2,4.8-4.8V75.5c5-1.9,8.6-6.8,8.6-12.5S28.8,52.5,23.8,50.5z M19,66.7c-2,0-3.7-1.7-3.7-3.7     c0-2,1.7-3.7,3.7-3.7c2,0,3.7,1.7,3.7,3.7C22.7,65.1,21,66.7,19,66.7z\"></path></g></g></g></svg>`;\n\n    return html`\n      <div class=\"section\">\n        <div class=\"header\">\n          <div class=\"section-header\">\n            <span\n              class=\"section-header posts-header\"\n              style=\"display: inline-block\"\n              >${msg(\n                str`${\n                  this.postTypeLabel ? this.postTypeLabel : this.postType\n                } List`\n              )}</span\n            >\n          </div>\n          <span class=\"filter-result-text\"\n            >${msg(str`Showing 1 of ${this.total}`)}</span\n          >\n\n          <button\n            class=\"bulkToggle toggleButton\"\n            id=\"bulk_edit_button\"\n            @click=${this._bulkEdit}\n          >\n            ${bulkEditSvg} ${msg('Bulk Edit')}\n          </button>\n          <button\n            class=\"fieldsToggle toggleButton\"\n            id=\"fields_edit_button\"\n            @click=${this._fieldsEdit}\n          >\n            ${fieldsSvg} ${msg('Fields')}\n          </button>\n\n          <dt-toggle\n            name=\"showArchived\"\n            label=${msg('Show Archived')}\n            ?checked=${this.showArchived}\n            hideIcons\n            onchange=${this._toggleShowArchived}\n            @click=${this._toggleShowArchived}\n          ></dt-toggle>\n        </div>\n        ${this._fieldsSelectorTemplate()} ${this._bulkSelectorTemplate()}\n        <table class=${classMap(bulkEditClass)}>\n          ${this._headerTemplate()}\n          ${this.posts ? this._rowTemplate() : msg('Loading')}\n        </table>\n      </div>\n    `;\n  }\n}\n\nwindow.customElements.define('dt-list', DtList);\n"],"names":["window","customElements","define","DtBase","styles","css","properties","postType","type","String","postTypeLabel","postTypeSettings","Object","attribute","posts","Array","total","Number","columns","sortedBy","loading","Boolean","default","offset","showArchived","showFieldsSelector","showBulkEditSelector","nonce","constructor","super","this","firstUpdated","api","ApiService","async","sortBy","sortOrder","filteredOptions","URLParams","encodeURI","map","column","join","makeRequestOnPosts","_headerClick","e","target","dataset","id","_getPosts","then","response","_bulkEdit","_fieldsEdit","_toggleShowArchived","_sortArrowsClass","_sortArrowsToggle","_headerTemplate","html","name","_rowTemplate","post","i","overall_status","key","permalink","ID","_cellTemplate","includes","formatted","display","ifDefined","label","length","value","favorite","_fieldListIconTemplate","field","icon","_fieldsListTemplate","repeat","keys","sort","a","b","nameA","toUpperCase","nameB","hidden","_updateFields","_fieldsSelectorTemplate","msg","viewableColumns","filter","splice","indexOf","push","style","setProperty","requestUpdate","_bulkSelectorTemplate","str","connectedCallback","render","bulkEditClass","bulk_editing","bulkEditSvg","fieldsSvg","classMap"],"mappings":"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"}