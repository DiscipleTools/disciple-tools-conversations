{"version":3,"file":"dt-multiselect-button-group.js","sources":["../../../src/components/form/dt-multiselect-button-group/dt-multiselect-button-group.js"],"sourcesContent":["import { html, css } from 'lit';\nimport DtFormBase from '../dt-form-base.js';\n\n\nexport class DtMultiSelectButtonGroup extends DtFormBase {\n  static get styles() {\n  return css`\n    :host {\n    }\n    .icon img {\n      width: 1rem;\n      height: 1rem;\n      display: inline;\n    }\n  `\n   };\n\n  static get properties() {\n    return {\n      buttons: { type: Array },\n      selectedButtons: { type: Array },\n      value: { type: Array, reflect: true },\n      icon: { type: String }\n      };\n  }\n\n  get classes() {\n    const classes = {\n      'dt-button': true,\n      'dt-button--outline': this.outline,\n      'dt-button--rounded': this.rounded,\n    };\n    const contextClass = `dt-button--${this.context}`;\n    classes[contextClass] = true;\n    return classes;\n  }\n\n  constructor() {\n    super();\n    this.buttons= [];\n    this.selectedButtons = [];\n    this.value = [];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.selectedButtons = this.value ? this.value.map(button => ({ value: button })) : [];\n  }\n\n  _handleButtonClick(event) {\n    const buttonValue = event.target.value;\n    const index = this.selectedButtons.findIndex(\n      button => button.value === buttonValue\n    );\n    if (index > -1) {\n      this.selectedButtons.splice(index, 1);\n      this.selectedButtons.push({ value: `-${buttonValue}` });\n    } else {\n      this.selectedButtons.push({ value: buttonValue});\n    }\n    this.value = this.selectedButtons.filter(button => !button.value.startsWith('-')).map(button => button.value);\n\n     this.dispatchEvent(new CustomEvent('change', {\n      detail: {\n        field: this.name,\n        oldValue: this.value,\n        newValue: this.selectedButtons,\n      },\n    }));\n    this._setFormValue(this.value);\n    this.requestUpdate();\n  }\n\n  _inputKeyDown(e) {\n      const keycode = e.keyCode || e.which;\n      switch (keycode) {\n        case 13: // enter\n          this._handleButtonClick(e);\n          break;\n        default:\n          // handle other keycodes here\n          break;\n      }\n  }\n\n\n  render() {\n    return html`\n       ${this.labelTemplate()}\n       ${this.loading\n          ? html`<dt-spinner class=\"icon-overlay\"></dt-spinner>`\n          : null}\n        ${this.saved\n          ? html`<dt-checkmark class=\"icon-overlay success\"></dt-checkmark>`\n          : null}\n       <div>\n        ${this.buttons.map(buttonSet => {\n          const items = Object.keys(buttonSet);\n          return items.map(item => {\n            const isSelected = this.selectedButtons.some(\n              selected => selected.value === item && !selected.delete\n            )\n            const context = isSelected ? 'success' : 'disabled';\n\n            return html`\n            <dt-button\n              id=${item}\n              type=\"success\"\n              context=${context}\n              .value=${item || this.value}\n              @click=\"${this._handleButtonClick}\"\n              @keydown=\"${this._inputKeyDown}\"\n              role=\"button\"\n              >\n               <span class=\"icon\">\n                ${buttonSet[item].icon\n                  ? html`<img src=\"${buttonSet[item].icon}\" alt=\"${this.iconAltText}\" />`\n                  : null}\n            </span>\n             ${buttonSet[item].label}</dt-button>\n          `;\n          });\n        })}\n        </div>\n    `;\n  }\n}\n\nwindow.customElements.define(\n  'dt-multiselect-buttons-group',\n  DtMultiSelectButtonGroup\n);\n"],"names":["window","customElements","define","DtFormBase","styles","css","properties","buttons","type","Array","selectedButtons","value","reflect","icon","String","classes","this","outline","rounded","context","constructor","super","connectedCallback","map","button","_handleButtonClick","event","buttonValue","target","index","findIndex","splice","push","filter","startsWith","dispatchEvent","CustomEvent","detail","field","name","oldValue","newValue","_setFormValue","requestUpdate","_inputKeyDown","e","keyCode","which","render","html","labelTemplate","loading","saved","buttonSet","Object","keys","item","isSelected","some","selected","delete","iconAltText","label"],"mappings":"gMAgIAA,OAAOC,eAAeC,OACpB,+BA7HK,cAAuCC,EACjCC,oBACX,OAAOC,CAAG,kDASR,CAESC,wBACT,MAAO,CACLC,QAAS,CAAEC,KAAMC,OACjBC,gBAAiB,CAAEF,KAAMC,OACzBE,MAAO,CAAEH,KAAMC,MAAOG,SAAS,GAC/BC,KAAM,CAAEL,KAAMM,QAEjB,CAEGC,cACF,MAAMA,EAAU,CACd,aAAa,EACb,qBAAsBC,KAAKC,QAC3B,qBAAsBD,KAAKE,SAI7B,OADAH,EADqB,cAAcC,KAAKG,YAChB,EACjBJ,CACR,CAEDK,cACEC,QACAL,KAAKT,QAAS,GACdS,KAAKN,gBAAkB,GACvBM,KAAKL,MAAQ,EACd,CAEDW,oBACED,MAAMC,oBACNN,KAAKN,gBAAkBM,KAAKL,MAAQK,KAAKL,MAAMY,KAAIC,IAAW,CAAEb,MAAOa,MAAa,EACrF,CAEDC,mBAAmBC,GACjB,MAAMC,EAAcD,EAAME,OAAOjB,MAC3BkB,EAAQb,KAAKN,gBAAgBoB,WACjCN,GAAUA,EAAOb,QAAUgB,IAEzBE,GAAS,GACXb,KAAKN,gBAAgBqB,OAAOF,EAAO,GACnCb,KAAKN,gBAAgBsB,KAAK,CAAErB,MAAO,IAAIgB,OAEvCX,KAAKN,gBAAgBsB,KAAK,CAAErB,MAAOgB,IAErCX,KAAKL,MAAQK,KAAKN,gBAAgBuB,QAAOT,IAAWA,EAAOb,MAAMuB,WAAW,OAAMX,KAAIC,GAAUA,EAAOb,QAEtGK,KAAKmB,cAAc,IAAIC,YAAY,SAAU,CAC5CC,OAAQ,CACNC,MAAOtB,KAAKuB,KACZC,SAAUxB,KAAKL,MACf8B,SAAUzB,KAAKN,oBAGnBM,KAAK0B,cAAc1B,KAAKL,OACxBK,KAAK2B,eACN,CAEDC,cAAcC,GAEV,GACO,MAFSA,EAAEC,SAAWD,EAAEE,OAG3B/B,KAAKS,mBAAmBoB,EAM/B,CAGDG,SACE,OAAOC,CAAI,GACNjC,KAAKkC,mBACLlC,KAAKmC,QACFF,CAAI,iDACJ,QACFjC,KAAKoC,MACHH,CAAI,6DACJ,YAEFjC,KAAKT,QAAQgB,KAAI8B,GACHC,OAAOC,KAAKF,GACb9B,KAAIiC,IACf,MAAMC,EAAazC,KAAKN,gBAAgBgD,MACtCC,GAAYA,EAAShD,QAAU6C,IAASG,EAASC,SAInD,OAAOX,CAAI,kBAEJO,8BAJSC,EAAa,UAAY,uBAO9BD,GAAQxC,KAAKL,kBACZK,KAAKS,iCACHT,KAAK4B,mDAIbS,EAAUG,GAAM3C,KACdoC,CAAI,aAAaI,EAAUG,GAAM3C,cAAcG,KAAK6C,gBACpD,eAELR,EAAUG,GAAMM,mBACpB,aAKR"}