{"version":3,"file":"dt-date.js","sources":["../../../src/components/form/dt-date/dt-date.js"],"sourcesContent":["import { html, css } from 'lit';\nimport DtFormBase from '../dt-form-base.js';\n\nexport class DtDate extends DtFormBase {\n  static get styles() {\n    return [\n      ...super.styles,\n      css`\n        input {\n          color: var(--dt-form-text-color, #000);\n          appearance: none;\n          background-color: var(--dt-form-background-color, #cecece);\n          border: 1px solid var(--dt-form-border-color, #cacaca);\n          border-radius: 0;\n          box-shadow: var(\n            --dt-form-input-box-shadow,\n            inset 0 1px 2px hsl(0deg 0% 4% / 10%)\n          );\n          box-sizing: border-box;\n          display: inline-flex;\n          font-family: inherit;\n          font-size: 1rem;\n          font-weight: 300;\n          height: 2.5rem;\n          line-height: 1.5;\n          padding: var(--dt-form-padding, 0.5333333333rem);\n          transition: var(\n            --dt-form-transition,\n            box-shadow 0.5s,\n            border-color 0.25s ease-in-out\n          );\n          width: 100%;\n        }\n        input:disabled,\n        input[readonly],\n        textarea:disabled,\n        textarea[readonly],\n        .input-group button:disabled {\n          background-color: var(--dt-form-disabled-background-color, #e6e6e6);\n          cursor: not-allowed;\n        }\n\n        /* input::-webkit-datetime-edit-text { color: red; padding: 0 0.3em; } */\n        input::-webkit-calendar-picker-indicator {\n          color: red;\n        }\n\n        .input-group {\n          position: relative;\n          display: inline-flex;\n          margin: 0 0 1.0666666667rem;\n          width: 100%;\n        }\n\n        .input-group .input-group-button {\n          font-size: 0.75rem;\n          line-height: 1em;\n          display: inline-flex;\n        }\n        .input-group .button {\n          display: inline-block;\n          background: var(--dt-form-background-color, #cecece);\n          border: 1px solid var(--dt-form-border-color, #cecece);\n          color: var(--alert-color, #cc4b37);\n          align-self: stretch;\n          font-size: 1rem;\n          height: auto;\n          padding: 0 1em;\n          margin: 0;\n        }\n        .input-group .button:hover:not([disabled]) {\n          background-color: var(--alert-color, #cc4b37);\n          color: var(--text-color-inverse, #fefefe);\n        }\n\n        .icon-overlay {\n          inset-inline-end: 5rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      ...super.properties,\n      id: { type: String },\n      value: {\n        type: String,\n        reflect: true,\n      },\n      timestamp: {\n        converter: date => {\n          let JStimestamp = Number(date);\n          if (JStimestamp < 1000000000000) {\n            JStimestamp *= 1000;\n          }\n          if (JStimestamp) return JStimestamp;\n          return undefined;\n        },\n        reflect: true,\n      },\n      onchange: { type: String },\n    };\n  }\n\n  // _convertArabicToEnglishNumbers() {\n  //   this.value\n  //   .replace(/[\\u0660-\\u0669]/g, (c) => { return c.charCodeAt(0) - 0x0660; })\n  //     .replace(/[\\u06f0-\\u06f9]/g, (c) => {\n  //       return c.charCodeAt(0) - 0x06f0;\n  //     });\n  // }\n\n  updateTimestamp(value) {\n    const timestampMilliseconds = new Date(value).getTime();\n    const timestampSecond = timestampMilliseconds / 1000;\n    const event = new CustomEvent('change', {\n      detail: {\n        field: this.name,\n        oldValue: this.timestamp,\n        newValue: timestampSecond,\n      },\n    });\n\n    this.timestamp = timestampMilliseconds;\n    this.value = value;\n    this._setFormValue(value);\n    this.dispatchEvent(event);\n  }\n\n  _change(e) {\n    this.updateTimestamp(e.target.value);\n  }\n\n  clearInput() {\n    this.updateTimestamp('');\n  }\n\n  showDatePicker() {\n    const input = this.shadowRoot.querySelector('input');\n    input.showPicker();\n  }\n\n  render() {\n    if (this.timestamp) {\n      this.value = new Date(this.timestamp).toISOString().substring(0, 10);\n    } else if (this.value) {\n      this.timestamp = new Date(this.value).getTime();\n    }\n\n    return html`\n      ${this.labelTemplate()}\n\n      <div class=\"input-group\">\n        <input\n          id=\"${this.id}\"\n          class=\"input-group-field dt_date_picker\"\n          type=\"date\"\n          autocomplete=\"off\"\n          .placeholder=\"${new Date().toISOString().substring(0, 10)}\"\n          .value=\"${this.value}\"\n          .timestamp=\"${this.date}\"\n          ?disabled=${this.disabled}\n          @change=\"${this._change}\"\n          @click=\"${this.showDatePicker}\"\n        />\n        <button\n          id=\"${this.id}-clear-button\"\n          class=\"button alert clear-date-button\"\n          data-inputid=\"${this.id}\"\n          title=\"Delete Date\"\n          type=\"button\"\n          ?disabled=${this.disabled}\n          @click=\"${this.clearInput}\"\n        >\n          x\n        </button>\n\n        ${(this.touched && this.invalid) || this.error\n          ? html`<dt-exclamation-circle\n              class=\"icon-overlay alert\"\n            ></dt-exclamation-circle>`\n          : null}\n        ${this.loading\n          ? html`<dt-spinner class=\"icon-overlay\"></dt-spinner>`\n          : null}\n        ${this.saved\n          ? html`<dt-checkmark class=\"icon-overlay success\"></dt-checkmark>`\n          : null}\n      </div>\n    `;\n  }\n}\n\nwindow.customElements.define('dt-date', DtDate);\n"],"names":["DtDate","DtFormBase","styles","super","css","properties","id","type","String","value","reflect","timestamp","converter","date","JStimestamp","Number","onchange","updateTimestamp","timestampMilliseconds","Date","getTime","timestampSecond","event","CustomEvent","detail","field","this","name","oldValue","newValue","_setFormValue","dispatchEvent","_change","e","target","clearInput","showDatePicker","shadowRoot","querySelector","showPicker","render","toISOString","substring","html","labelTemplate","disabled","touched","invalid","error","loading","saved","window","customElements","define"],"mappings":"gMAGO,MAAMA,UAAeC,EACfC,oBACT,MAAO,IACFC,MAAMD,OACTE,CAAG,q0CAyEN,CAEUC,wBACT,MAAO,IACFF,MAAME,WACTC,GAAI,CAAEC,KAAMC,QACZC,MAAO,CACLF,KAAMC,OACNE,SAAS,GAEXC,UAAW,CACTC,UAAWC,IACT,IAAIC,EAAcC,OAAOF,GAIzB,GAHIC,EAAc,OAChBA,GAAe,KAEbA,EAAa,OAAOA,CACR,EAElBJ,SAAS,GAEXM,SAAU,CAAET,KAAMC,QAErB,CAUDS,gBAAgBR,GACd,MAAMS,EAAwB,IAAIC,KAAKV,GAAOW,UACxCC,EAAkBH,EAAwB,IAC1CI,EAAQ,IAAIC,YAAY,SAAU,CACtCC,OAAQ,CACNC,MAAOC,KAAKC,KACZC,SAAUF,KAAKf,UACfkB,SAAUR,KAIdK,KAAKf,UAAYO,EACjBQ,KAAKjB,MAAQA,EACbiB,KAAKI,cAAcrB,GACnBiB,KAAKK,cAAcT,EACpB,CAEDU,QAAQC,GACNP,KAAKT,gBAAgBgB,EAAEC,OAAOzB,MAC/B,CAED0B,aACET,KAAKT,gBAAgB,GACtB,CAEDmB,iBACgBV,KAAKW,WAAWC,cAAc,SACtCC,YACP,CAEDC,SAOE,OANId,KAAKf,UACPe,KAAKjB,MAAQ,IAAIU,KAAKO,KAAKf,WAAW8B,cAAcC,UAAU,EAAG,IACxDhB,KAAKjB,QACdiB,KAAKf,UAAY,IAAIQ,KAAKO,KAAKjB,OAAOW,WAGjCuB,CAAI,GACPjB,KAAKkB,sDAIGlB,KAAKpB,8FAIK,IAAIa,MAAOsB,cAAcC,UAAU,EAAG,gBAC5ChB,KAAKjB,sBACDiB,KAAKb,oBACPa,KAAKmB,sBACNnB,KAAKM,oBACNN,KAAKU,gCAGTV,KAAKpB,yEAEKoB,KAAKpB,oDAGToB,KAAKmB,qBACPnB,KAAKS,0BAKdT,KAAKoB,SAAWpB,KAAKqB,SAAYrB,KAAKsB,MACrCL,CAAI,6EAGJ,QACFjB,KAAKuB,QACHN,CAAI,iDACJ,QACFjB,KAAKwB,MACHP,CAAI,6DACJ,YAGT,EAGHQ,OAAOC,eAAeC,OAAO,UAAWrD"}