{"version":3,"file":"dt-church-health-circle.js","sources":["../../../src/components/form/dt-church-health-circle/dt-church-health-circle.js"],"sourcesContent":["import { css, html } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport DtBase from '../../dt-base.js';\nimport './dt-church-health-circle-icon.js';\n\nexport class DtChurchHealthCircle extends DtBase {\n  static get styles() {\n    return css`\n      .health-circle__container {\n        --d: 55px; /* image size */\n        --rel: 1; /* how much extra space we want between images, 1 = one image size */\n        --r: calc(1 * var(--d) / var(--tan)); /* circle radius */\n        --s: calc(3 * var(--r));\n        margin: 1rem auto;\n        display: flex;\n        justify-content: center;\n        align-items: baseline;\n        padding-top: 100%;\n        height: 0;\n        position: relative;\n        overflow: visible;\n      }\n\n      .health-circle {\n        display: block;\n        border-radius: 100%;\n        border: 3px darkgray dashed;\n        max-width: 100%;\n        position: absolute;\n        transform: translate(-50%, -50%);\n        left: 50%;\n        top: 50%;\n        width: 100%;\n        height: 100%;\n      }\n\n      @media (max-width: 519px) {\n        .health-circle__container {\n          --d: 40px; /* image size */\n        }\n\n        .health-circle {\n          max-width: 300px;\n          max-height: 300px;\n        }\n      }\n\n      @media (max-width: 400px) {\n        .health-circle__container {\n          --d: 30px; /* image size */\n        }\n\n        .health-circle {\n          max-width: 250px;\n          max-height: 250px;\n        }\n      }\n\n      @media (max-width: 321px) {\n        .health-circle__container {\n          --d: 25px; /* image size */\n        }\n\n        .health-circle {\n          max-width: 225px;\n          max-height: 225px;\n        }\n      }\n\n      .health-circle__grid {\n        display: inline-block;\n        position: relative;\n        height: 100%;\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n        position: relative;\n        width: var(--s);\n        max-width: 100%;\n      }\n\n      .health-circle--committed {\n        border: 3px #4caf50 solid !important;\n      }\n\n      dt-church-health-icon {\n        position: absolute;\n        border-radius: 100%;\n        font-size: 16px;\n        color: black;\n        text-align: center;\n        font-style: italic;\n        cursor: pointer;\n        top: 50%;\n        left: 50%;\n        margin: calc(-0.5 * var(--d));\n        width: var(--d);\n        height: var(--d);\n        --az: calc(var(--i) * 1turn / var(--m));\n        transform: rotate(var(--az)) translate(var(--r)) rotate(calc(-1 * var(--az)));\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      groupId: { type: Number },\n      group: { type: Object, reflect: false },\n      settings: { type: Object, reflect: false },\n      errorMessage: { type: String, attribute: false },\n      missingIcon: { type: String },\n      handleSave: { type: Function },\n    };\n  }\n\n  /**\n   * Map fields settings as an array and filter out church commitment\n   */\n  get metrics() {\n    const settings = this.settings || [];\n\n    if (!Object.values(settings).length) {\n      return [];\n    }\n\n    const entries = Object.entries(settings);\n\n    //We don't want to show church commitment in the circle\n    return entries.filter(([key, value]) => key !== 'church_commitment');\n  }\n\n  get isCommited() {\n    if (!this.group) {\n      return false;\n    }\n\n    if (!this.group.health_metrics) {\n      return false;\n    }\n\n    return this.group.health_metrics.includes('church_commitment');\n  }\n\n  /**\n   * Fetch group data on component load if it's not provided as a property\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.fetch();\n  }\n\n  adoptedCallback() {\n    this.distributeItems();\n  }\n\n  /**\n   * Position the items after the component is rendered\n   */\n  updated() {\n    this.distributeItems();\n  }\n\n  /**\n   * Fetch the group and settings data if not provided by the server\n   */\n  async fetch() {\n    try {\n      const promises = [this.fetchSettings(), this.fetchGroup()];\n      let [settings, group] = await Promise.all(promises);\n      this.settings = settings;\n      this.post = group;\n      if (!settings) {\n        this.errorMessage = 'Error loading settings';\n      }\n      if (!group) {\n        this.errorMessage = 'Error loading group';\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * Fetch the group data if it's not already set\n   * @returns\n   */\n  fetchGroup() {\n    if (this.group) {\n      return Promise.resolve(this.group);\n    }\n    fetch(`/wp-json/dt-posts/v2/groups/${this.groupId}`).then(response =>\n      response.json()\n    );\n  }\n\n  /**\n   * Fetch the settings data if not already set\n   * @returns\n   */\n  fetchSettings() {\n    if (this.settings) {\n      return Promise.resolve(this.settings);\n    }\n    return fetch('/wp-json/dt-posts/v2/groups/settings').then(response =>\n      response.json()\n    );\n  }\n\n  /**\n   * Find a metric by key\n   * @param {*} key\n   * @returns\n   */\n  findMetric(key) {\n    const metric = this.metrics.find(item => item.key === key);\n    return metric ? metric.value : null;\n  }\n\n  /**\n   * Render the component\n   * @returns\n   */\n  render() {\n    // Show the spinner if we don't have data\n    if (!this.group || !this.metrics.length) {\n      return html`<dt-spinner></dt-spinner>`;\n    }\n\n    // Setup data\n    const practicedItems = this.group.health_metrics || [];\n\n    // Show the error message if we have one\n    if (this.errorMessage) {\n      html`<dt-alert type=\"error\">${this.errorMessage}</dt-alert>`;\n    }\n\n    // Render the group circle\n    return html`\n      <div class=\"health-circle__wrapper\">\n        <div class=\"health-circle__container\">\n          <div\n            class=${classMap({\n              'health-circle': true,\n              'health-circle--committed': this.isCommited,\n            })}\n          >\n            <div class=\"health-circle__grid\">\n              ${this.metrics.map(\n                ([key, metric], index) =>\n                  html`<dt-church-health-icon\n                    key=\"${key}\"\n                    .group=\"${this.group}\"\n                    .metric=${metric}\n                    .active=${practicedItems.indexOf(key) !== -1}\n                    .style=\"--i: ${index + 1}\"\n                    .missingIcon=\"${this.missingIcon}\"\n                    .handleSave=\"${this.handleSave}\"\n                  >\n                  </dt-church-health-icon>`\n              )}\n            </div>\n          </div>\n        </div>\n\n        <dt-toggle\n          name=\"church-commitment\"\n          label=\"${this.settings.church_commitment.label}\"\n          requiredmessage=\"\"\n          icon=\"https://cdn-icons-png.flaticon.com/512/1077/1077114.png\"\n          iconalttext=\"Icon Alt Text\"\n          privatelabel=\"\"\n          @click=\"${this.toggleClick}\"\n          ?checked=${this.isCommited}\n        >\n        </dt-toggle>\n      </div>\n    `;\n  }\n\n  /**\n   * Dynamically distribute items in Church Health Circle\n   * according to amount of health metric elements\n   */\n  distributeItems() {\n    const container = this.renderRoot.querySelector(\n      '.health-circle__container'\n    );\n    const items = container.querySelectorAll('dt-church-health-icon');\n\n    let n_items = items.length;\n    let m = n_items; /* how many are ON the circle */\n    let tan = Math.tan(Math.PI / m); /* tangent of half the base angle */\n\n    container.style.setProperty('--m', m);\n    container.style.setProperty('--tan', + tan.toFixed(2));\n  }\n\n  async toggleClick(e) {\n    const { handleSave } = this;\n\n    if (!handleSave) {\n      return;\n    }\n\n    let toggle = this.renderRoot.querySelector('dt-toggle');\n    let church_commitment = toggle.toggleAttribute('checked');\n    if (!this.group.health_metrics) {\n      this.group.health_metrics = [];\n    }\n\n    const payload = {\n      health_metrics: {\n        values: [\n          {\n            value: 'church_commitment',\n            delete: !church_commitment,\n          },\n        ],\n      },\n    };\n\n    try {\n      await handleSave(this.group.ID, payload);\n    } catch (err) {\n      toggle.toggleAttribute('checked', !church_commitment);\n      console.error(err);\n      return;\n    }\n\n    if (church_commitment) {\n      this.group.health_metrics.push('church_commitment');\n    } else {\n      this.group.health_metrics.pop('church_commitment');\n    }\n\n    this.requestUpdate();\n  }\n\n  _isChecked() {\n    if (Object.hasOwn(this.group, 'health_metrics')) {\n      if (this.group.health_metrics.includes('church_commitment')) {\n        return (this.isChurch = true);\n      }\n      return (this.isChurch = false);\n    }\n    return (this.isChurch = false);\n  }\n}\n\nwindow.customElements.define('dt-church-health-circle', DtChurchHealthCircle);\n"],"names":["window","customElements","define","DtBase","styles","css","properties","groupId","type","Number","group","Object","reflect","settings","errorMessage","String","attribute","missingIcon","handleSave","Function","metrics","this","values","length","entries","filter","key","value","isCommited","health_metrics","includes","connectedCallback","super","fetch","adoptedCallback","distributeItems","updated","async","promises","fetchSettings","fetchGroup","Promise","all","post","e","console","error","resolve","then","response","json","findMetric","metric","find","item","render","html","practicedItems","classMap","map","index","indexOf","church_commitment","label","toggleClick","container","renderRoot","querySelector","m","querySelectorAll","tan","Math","PI","style","setProperty","toFixed","toggle","toggleAttribute","payload","delete","ID","err","push","pop","requestUpdate","_isChecked","hasOwn","isChurch"],"mappings":"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"}